aws.regiao=${AWS_REGION}
aws.id=${CLIENT_ID}
aws.bucket.name=${BUCKET}
aws.userPool=${USER_POOL_ID}
quarkus.devservices.enabled=false
# Configurações de logging
quarkus.log.level=INFO
mp.messaging.health.enabled=true
#Receber Video Video.Uploads
mp.messaging.incoming.video-uploads.connector=smallrye-kafka
mp.messaging.incoming.video-uploads.bootstrap.servers=${KAFKA_URL}
mp.messaging.incoming.video-uploads.auto.offset.reset=earliest
mp.messaging.incoming.video-uploads.enable.auto.commit=true
mp.messaging.incoming.video-uploads.topic=video.uploads
mp.messaging.incoming.video-uploads.group.id=central-group
mp.messaging.incoming.video-uploads.client.id=central-${quarkus.uuid}
#Receber Video Video-Status
mp.messaging.incoming.video-status.connector=smallrye-kafka
mp.messaging.incoming.video-status.bootstrap.servers=${KAFKA_URL}
mp.messaging.incoming.video-status.auto.offset.reset=earliest
mp.messaging.incoming.video-status.enable.auto.commit=true
mp.messaging.incoming.video-status.topic=video.status
mp.messaging.incoming.video-status.group.id=central-group
mp.messaging.incoming.video-status.client.id=central-${quarkus.uuid}
#Banco de Dados
quarkus.datasource.db-kind=${DB_KIND}
quarkus.datasource.username=${POSTGRES_USER}
quarkus.datasource.password=${POSTGRES_PASSWORD}
quarkus.datasource.jdbc.url=${POSTGRES_URL}
quarkus.hibernate-orm.database.generation=create-drop
#Verificar Token
quarkus.oidc.auth-server-url=https://cognito-idp.${AWS_REGION}.amazonaws.com/${USER_POOL_ID}/
quarkus.oidc.client-id=${CLIENT_ID}
quarkus.oidc.application-type=service
# Configurações essenciais
quarkus.oidc.discovery-enabled=true
quarkus.oidc.connection-timeout=30s
quarkus.oidc.token.verify-access-token-with-user-info=false
# Paths públicos (não requerem token)
quarkus.http.auth.permission.public.paths=/public/*,/health/*
quarkus.http.auth.permission.public.policy=permit
# === CONFIGURAÇÕES DE TOKEN BEARER ===
# Header onde o token será enviado (padrão: Authorization)
quarkus.oidc.token.header=Authorization
# Esquema do token (padrão: Bearer)
quarkus.oidc.token.authorization-scheme=Bearer
# === CONFIGURAÇÕES ESPECÍFICAS DO COGNITO ===
# Não verificar access token com userinfo (melhora performance)
quarkus.oidc.token.verify-access-token-with-user-info=false
# Permite tokens sem role claims
quarkus.oidc.token.allow-jwt-introspection=false
quarkus.oidc.token.allow-opaque-token-introspection=false
# === CONFIGURAÇÃO DE CACHE JWKS ===
# Cache das chaves públicas para melhor performance
quarkus.oidc.token.jwks-cache-size=10
quarkus.oidc.token.jwks-cache-time-to-live=10M
#Swagger
quarkus.smallrye-openapi.info-version=1.0.0
quarkus.swagger-ui.path=/swagger-ui
quarkus.smallrye-openapi.path=/swagger
quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.path=/openapi
quarkus.smallrye-openapi.info-title=SnapCast - Central
quarkus.smallrye-openapi.info-contact-email=mrpauloii@gmail.com
quarkus.smallrye-openapi.info-license-name=Apache 2.0
quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html
#
quarkus.swagger-ui.oauth2-redirect-url=http://localhost:8080/swagger-ui/oauth2-redirect.html
quarkus.swagger-ui.oauth2-authorization-url=https://cognito-idp.${AWS_REGION}.amazonaws.com/${USER_POOL_ID}/oauth2/authorize
quarkus.swagger-ui.oauth2-token-url=https://cognito-idp.${AWS_REGION}.amazonaws.com/${USER_POOL_ID}/oauth2/token
quarkus.swagger-ui.oauth2-client-id=${CLIENT_ID}
quarkus.swagger-ui.oauth2-use-basic-authentication-with-access-code-grant=false
quarkus.swagger-ui.oauth2-scopes=openid
quarkus.swagger-ui.oauth2-flow=accessCode
quarkus.swagger-ui.oauth2-enable=true
# Configurações básicas de SMTP
quarkus.mailer.from=${EMAIL}
quarkus.mailer.host=${HOST_EMAIL}
quarkus.mailer.port=587
quarkus.mailer.username=${EMAIL}
quarkus.mailer.password=${SENHA_EMAIL}
quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN
quarkus.mailer.start-tls=REQUIRED
quarkus.mailer.mock=false
#Banner
quarkus.banner.path=banner.txt
